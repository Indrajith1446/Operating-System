breakpoint;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=9;
alias userSP R1;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
alias filename R2;
filename=[([PTBR+2*((userSP-4)/512)]*512)+((userSP-4)%512)];
alias i R3;
alias flag R4;
flag=0;
i=0;
while(i<MAX_FILE_NUM) do
	if([INODE_TABLE+(i*16)+1]==filename) then
		flag=1;
		break;
	endif;
	i=i+1;
endwhile;
if(flag==0) then
	[([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512)]=-1;
	SP=userSP;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	ireturn;
endif;
if([INODE_TABLE+(i*16)]!=EXEC) then
	[([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512)]=-1;
	SP=userSP;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;	
	ireturn;
endif;
multipush(R1,R2,R3,R4);
R1=3;
R2=[SYSTEM_STATUS_TABLE+1];
breakpoint;
call MOD_1;
breakpoint;
multipop(R1,R2,R3,R4);
alias user_pno R5;
user_pno=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11];
//initialising perprocess resource table
alias j R6;
breakpoint;
j=0;
while(j<8) do
	[user_pno*512+496+2*j]=-1;
	j=j+1;
endwhile;
[MEMORY_FREE_LIST+user_pno]=[MEMORY_FREE_LIST+user_pno]+1;
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=RUNNING;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+7]=i;
PTBR=PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20;
//lib
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";
[MEMORY_FREE_LIST+63]=[MEMORY_FREE_LIST+63]+1;
[MEMORY_FREE_LIST+64]=[MEMORY_FREE_LIST+64]+1;
//heap
[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";
//stack
multipush(R1,R2,R3,R4,R5,R6);
R1=1;
breakpoint;
call MOD_2;
breakpoint;
[PTBR+16]=R0;
[PTBR+17]="0110";
multipop(R1,R2,R3,R4,R5,R6);
multipush(R1,R2,R3,R4,R5,R6);
R1=1;
breakpoint;
call MOD_2;
breakpoint;
[PTBR+18]=R0;
[PTBR+19]="0110";
multipop(R1,R2,R3,R4,R5,R6);
//code
if([INODE_TABLE+(i*16)+8]!=-1) then
	multipush(R1,R2,R3,R4,R5,R6);
	R1=5;
	R2=[INODE_TABLE+(i*16)+8];
	breakpoint;
	call MOD_2;
	breakpoint;
	[PTBR+8]=R0;
	[PTBR+9]="0110";
	multipop(R1,R2,R3,R4,R5,R6);
endif;
[PTBR+10]=-1;
[PTBR+11]="0000";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";
//initialising disk map table
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+0]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+1]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+2]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+3]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+4]=[INODE_TABLE+(i*16)+8];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+5]=[INODE_TABLE+(i*16)+9];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+6]=[INODE_TABLE+(i*16)+10];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+7]=[INODE_TABLE+(i*16)+11];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+8]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+9]=-1;	
[[PTBR+16]*512]=[[PTBR+8]*512+1];
SP=8*512;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
ireturn;

