alias function_no R1;
//get PCB entry
if(function_no==1) then
	alias i R2;
	i=0;
	while(i<16) do
		if([PROCESS_TABLE+(i*16)+4]==TERMINATED) then
			R0=i;
			[PROCESS_TABLE+(i*16)+1]=i;
			[PROCESS_TABLE+(i*16)+4]=ALLOCATED;
			[PROCESS_TABLE+(i*16)+14]=PAGE_TABLE_BASE+i*20;
			[PROCESS_TABLE+(i*16)+15]=10;
			return;
		endif;	
		i=i+1;
	endwhile;	
	R0=-1;
	return;
endif;
//free user area page
if(function_no==2) then
	alias current_pid R2;
	R3=[PROCESS_TABLE+(current_pid*16)+11];
	multipush(R1,R2,R3);
	R1=2;
	R2=R3;
	breakpoint;
	call MOD_2;
	breakpoint;
	multipop(R1,R2,R3);
	return;
endif;
//exit process
if(function_no==3) then
	alias current_pid R2;
	R3=R2;
	multipush(R1,R2,R3);
	R1=4;
	R2=current_pid;
	breakpoint;
	call MOD_1;
	breakpoint;
	multipop(R1,R2,R3);
	R3=R2;
	multipush(R1,R2,R3);
	R1=2;
	R2=current_pid;
	breakpoint;
	call MOD_1;
	breakpoint;
	multipop(R1,R2,R3);
	return;
endif;
//free page table
if(function_no==4) then
	alias current_pid R2;
	alias i R4;
	PTBR=PAGE_TABLE_BASE+20*current_pid;
	//lib
	[PTBR+0]=-1;
	[PTBR+1]="0000";
	[PTBR+2]=-1;
	[PTBR+3]="0000";
	i=4;
	while(i<20) do
		if([PTBR+i]!=-1) then
			multipush(R1,R2,R3,R4);
			R1=2;
			R2=[PTBR+i];
			breakpoint;
			call MOD_2;
			breakpoint;
			multipop(R1,R2,R3,R4);
			[PTBR+i]=-1;
			[PTBR+i+1]="0000";
		endif;
		i=i+2;
	endwhile;
	if([DISK_MAP_TABLE+current_pid*10+2]!=-1) then
		multipush(R1,R2,R3,R4);
		R1=4;
		R2=[DISK_MAP_TABLE+current_pid*10+2];
		call MOD_2;
		multipop(R1,R2,R3,R4);
	endif;
	if([DISK_MAP_TABLE+current_pid*10+3]!=-1) then
		multipush(R1,R2,R3,R4);
		R1=4;
		R2=[DISK_MAP_TABLE+current_pid*10+2];
		call MOD_2;
		multipop(R1,R2,R3,R4);
	endif;
	if([DISK_MAP_TABLE+current_pid*10+8]!=-1) then
		multipush(R1,R2,R3,R4);
		R1=4;
		R2=[DISK_MAP_TABLE+current_pid*10+2];
		call MOD_2;
		multipop(R1,R2,R3,R4);
	endif;
	if([DISK_MAP_TABLE+current_pid*10+9]!=-1) then
		multipush(R1,R2,R3,R4);
		R1=4;
		R2=[DISK_MAP_TABLE+current_pid*10+2];
		call MOD_2;
		multipop(R1,R2,R3,R4);
	endif;
	i=0;
	while(i<=9) do
		[DISK_MAP_TABLE+current_pid*10+i]=-1;
		i=i+1;
	endwhile;
	return;
endif;

